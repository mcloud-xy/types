// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"
	time "time"

	v1alpha1 "github.com/openkruise/kruise-api/apps/v1alpha1"
	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1alpha1a "github.com/rancher/types/apis/apps.kruise.io/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockCloneSetListerMockGet  sync.RWMutex
	lockCloneSetListerMockList sync.RWMutex
)

// Ensure, that CloneSetListerMock does implement CloneSetLister.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1a.CloneSetLister = &CloneSetListerMock{}

// CloneSetListerMock is a mock implementation of CloneSetLister.
//
//     func TestSomethingThatUsesCloneSetLister(t *testing.T) {
//
//         // make and configure a mocked CloneSetLister
//         mockedCloneSetLister := &CloneSetListerMock{
//             GetFunc: func(namespace string, name string) (*v1alpha1.CloneSet, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1alpha1.CloneSet, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedCloneSetLister in code that requires CloneSetLister
//         // and then make assertions.
//
//     }
type CloneSetListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1alpha1.CloneSet, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1alpha1.CloneSet, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *CloneSetListerMock) Get(namespace string, name string) (*v1alpha1.CloneSet, error) {
	if mock.GetFunc == nil {
		panic("CloneSetListerMock.GetFunc: method is nil but CloneSetLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockCloneSetListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCloneSetListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCloneSetLister.GetCalls())
func (mock *CloneSetListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockCloneSetListerMockGet.RLock()
	calls = mock.calls.Get
	lockCloneSetListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CloneSetListerMock) List(namespace string, selector labels.Selector) ([]*v1alpha1.CloneSet, error) {
	if mock.ListFunc == nil {
		panic("CloneSetListerMock.ListFunc: method is nil but CloneSetLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockCloneSetListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCloneSetListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCloneSetLister.ListCalls())
func (mock *CloneSetListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockCloneSetListerMockList.RLock()
	calls = mock.calls.List
	lockCloneSetListerMockList.RUnlock()
	return calls
}

var (
	lockCloneSetControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockCloneSetControllerMockAddClusterScopedHandler        sync.RWMutex
	lockCloneSetControllerMockAddFeatureHandler              sync.RWMutex
	lockCloneSetControllerMockAddHandler                     sync.RWMutex
	lockCloneSetControllerMockEnqueue                        sync.RWMutex
	lockCloneSetControllerMockEnqueueAfter                   sync.RWMutex
	lockCloneSetControllerMockGeneric                        sync.RWMutex
	lockCloneSetControllerMockInformer                       sync.RWMutex
	lockCloneSetControllerMockLister                         sync.RWMutex
	lockCloneSetControllerMockStart                          sync.RWMutex
	lockCloneSetControllerMockSync                           sync.RWMutex
)

// Ensure, that CloneSetControllerMock does implement CloneSetController.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1a.CloneSetController = &CloneSetControllerMock{}

// CloneSetControllerMock is a mock implementation of CloneSetController.
//
//     func TestSomethingThatUsesCloneSetController(t *testing.T) {
//
//         // make and configure a mocked CloneSetController
//         mockedCloneSetController := &CloneSetControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1alpha1a.CloneSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1alpha1a.CloneSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v1alpha1a.CloneSetHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1alpha1a.CloneSetHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
// 	               panic("mock out the EnqueueAfter method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1alpha1a.CloneSetLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedCloneSetController in code that requires CloneSetController
//         // and then make assertions.
//
//     }
type CloneSetControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1alpha1a.CloneSetHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1alpha1a.CloneSetHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v1alpha1a.CloneSetHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1alpha1a.CloneSetHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1alpha1a.CloneSetLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1alpha1a.CloneSetHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1alpha1a.CloneSetHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha1a.CloneSetHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1alpha1a.CloneSetHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *CloneSetControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1alpha1a.CloneSetHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("CloneSetControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but CloneSetController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v1alpha1a.CloneSetHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockCloneSetControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockCloneSetControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedCloneSetController.AddClusterScopedFeatureHandlerCalls())
func (mock *CloneSetControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v1alpha1a.CloneSetHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v1alpha1a.CloneSetHandlerFunc
	}
	lockCloneSetControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockCloneSetControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *CloneSetControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1alpha1a.CloneSetHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("CloneSetControllerMock.AddClusterScopedHandlerFunc: method is nil but CloneSetController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1alpha1a.CloneSetHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockCloneSetControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockCloneSetControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedCloneSetController.AddClusterScopedHandlerCalls())
func (mock *CloneSetControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1alpha1a.CloneSetHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1alpha1a.CloneSetHandlerFunc
	}
	lockCloneSetControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockCloneSetControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *CloneSetControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v1alpha1a.CloneSetHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("CloneSetControllerMock.AddFeatureHandlerFunc: method is nil but CloneSetController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1alpha1a.CloneSetHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockCloneSetControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockCloneSetControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedCloneSetController.AddFeatureHandlerCalls())
func (mock *CloneSetControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v1alpha1a.CloneSetHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1alpha1a.CloneSetHandlerFunc
	}
	lockCloneSetControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockCloneSetControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *CloneSetControllerMock) AddHandler(ctx context.Context, name string, handler v1alpha1a.CloneSetHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("CloneSetControllerMock.AddHandlerFunc: method is nil but CloneSetController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1alpha1a.CloneSetHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockCloneSetControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockCloneSetControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedCloneSetController.AddHandlerCalls())
func (mock *CloneSetControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1alpha1a.CloneSetHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1alpha1a.CloneSetHandlerFunc
	}
	lockCloneSetControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockCloneSetControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *CloneSetControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("CloneSetControllerMock.EnqueueFunc: method is nil but CloneSetController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockCloneSetControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockCloneSetControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedCloneSetController.EnqueueCalls())
func (mock *CloneSetControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockCloneSetControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockCloneSetControllerMockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *CloneSetControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("CloneSetControllerMock.EnqueueAfterFunc: method is nil but CloneSetController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	lockCloneSetControllerMockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	lockCloneSetControllerMockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//     len(mockedCloneSetController.EnqueueAfterCalls())
func (mock *CloneSetControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	lockCloneSetControllerMockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	lockCloneSetControllerMockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *CloneSetControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("CloneSetControllerMock.GenericFunc: method is nil but CloneSetController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockCloneSetControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockCloneSetControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedCloneSetController.GenericCalls())
func (mock *CloneSetControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockCloneSetControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockCloneSetControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *CloneSetControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("CloneSetControllerMock.InformerFunc: method is nil but CloneSetController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockCloneSetControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockCloneSetControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedCloneSetController.InformerCalls())
func (mock *CloneSetControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockCloneSetControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockCloneSetControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *CloneSetControllerMock) Lister() v1alpha1a.CloneSetLister {
	if mock.ListerFunc == nil {
		panic("CloneSetControllerMock.ListerFunc: method is nil but CloneSetController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockCloneSetControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockCloneSetControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedCloneSetController.ListerCalls())
func (mock *CloneSetControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockCloneSetControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockCloneSetControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *CloneSetControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("CloneSetControllerMock.StartFunc: method is nil but CloneSetController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockCloneSetControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockCloneSetControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedCloneSetController.StartCalls())
func (mock *CloneSetControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockCloneSetControllerMockStart.RLock()
	calls = mock.calls.Start
	lockCloneSetControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *CloneSetControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("CloneSetControllerMock.SyncFunc: method is nil but CloneSetController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockCloneSetControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockCloneSetControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedCloneSetController.SyncCalls())
func (mock *CloneSetControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockCloneSetControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockCloneSetControllerMockSync.RUnlock()
	return calls
}

var (
	lockCloneSetInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockCloneSetInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockCloneSetInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockCloneSetInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockCloneSetInterfaceMockAddFeatureHandler                sync.RWMutex
	lockCloneSetInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockCloneSetInterfaceMockAddHandler                       sync.RWMutex
	lockCloneSetInterfaceMockAddLifecycle                     sync.RWMutex
	lockCloneSetInterfaceMockController                       sync.RWMutex
	lockCloneSetInterfaceMockCreate                           sync.RWMutex
	lockCloneSetInterfaceMockDelete                           sync.RWMutex
	lockCloneSetInterfaceMockDeleteCollection                 sync.RWMutex
	lockCloneSetInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockCloneSetInterfaceMockGet                              sync.RWMutex
	lockCloneSetInterfaceMockGetNamespaced                    sync.RWMutex
	lockCloneSetInterfaceMockList                             sync.RWMutex
	lockCloneSetInterfaceMockListNamespaced                   sync.RWMutex
	lockCloneSetInterfaceMockObjectClient                     sync.RWMutex
	lockCloneSetInterfaceMockUpdate                           sync.RWMutex
	lockCloneSetInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that CloneSetInterfaceMock does implement CloneSetInterface.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1a.CloneSetInterface = &CloneSetInterfaceMock{}

// CloneSetInterfaceMock is a mock implementation of CloneSetInterface.
//
//     func TestSomethingThatUsesCloneSetInterface(t *testing.T) {
//
//         // make and configure a mocked CloneSetInterface
//         mockedCloneSetInterface := &CloneSetInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1alpha1a.CloneSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1alpha1a.CloneSetLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1alpha1a.CloneSetHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1alpha1a.CloneSetLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v1alpha1a.CloneSetHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v1alpha1a.CloneSetLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1alpha1a.CloneSetHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1alpha1a.CloneSetLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1alpha1a.CloneSetController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1alpha1.CloneSet) (*v1alpha1.CloneSet, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v1alpha1.CloneSet, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v1alpha1.CloneSet, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v1alpha1a.CloneSetList, error) {
// 	               panic("mock out the List method")
//             },
//             ListNamespacedFunc: func(namespace string, opts v1.ListOptions) (*v1alpha1a.CloneSetList, error) {
// 	               panic("mock out the ListNamespaced method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1alpha1.CloneSet) (*v1alpha1.CloneSet, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedCloneSetInterface in code that requires CloneSetInterface
//         // and then make assertions.
//
//     }
type CloneSetInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1alpha1a.CloneSetHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1alpha1a.CloneSetLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1alpha1a.CloneSetHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1alpha1a.CloneSetLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v1alpha1a.CloneSetHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v1alpha1a.CloneSetLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1alpha1a.CloneSetHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1alpha1a.CloneSetLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1alpha1a.CloneSetController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha1.CloneSet) (*v1alpha1.CloneSet, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v1alpha1.CloneSet, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v1alpha1.CloneSet, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v1alpha1a.CloneSetList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts v1.ListOptions) (*v1alpha1a.CloneSetList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha1.CloneSet) (*v1alpha1.CloneSet, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1alpha1a.CloneSetHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1alpha1a.CloneSetLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1alpha1a.CloneSetHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1alpha1a.CloneSetLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha1a.CloneSetHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1alpha1a.CloneSetLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha1a.CloneSetHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1alpha1a.CloneSetLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1.CloneSet
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1.CloneSet
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *CloneSetInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1alpha1a.CloneSetHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("CloneSetInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but CloneSetInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v1alpha1a.CloneSetHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockCloneSetInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockCloneSetInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedCloneSetInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *CloneSetInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v1alpha1a.CloneSetHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v1alpha1a.CloneSetHandlerFunc
	}
	lockCloneSetInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockCloneSetInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *CloneSetInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1alpha1a.CloneSetLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("CloneSetInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but CloneSetInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v1alpha1a.CloneSetLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockCloneSetInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockCloneSetInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedCloneSetInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *CloneSetInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v1alpha1a.CloneSetLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v1alpha1a.CloneSetLifecycle
	}
	lockCloneSetInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockCloneSetInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *CloneSetInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1alpha1a.CloneSetHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("CloneSetInterfaceMock.AddClusterScopedHandlerFunc: method is nil but CloneSetInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1alpha1a.CloneSetHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockCloneSetInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockCloneSetInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedCloneSetInterface.AddClusterScopedHandlerCalls())
func (mock *CloneSetInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1alpha1a.CloneSetHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1alpha1a.CloneSetHandlerFunc
	}
	lockCloneSetInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockCloneSetInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *CloneSetInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1alpha1a.CloneSetLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("CloneSetInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but CloneSetInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1alpha1a.CloneSetLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockCloneSetInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockCloneSetInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedCloneSetInterface.AddClusterScopedLifecycleCalls())
func (mock *CloneSetInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1alpha1a.CloneSetLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1alpha1a.CloneSetLifecycle
	}
	lockCloneSetInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockCloneSetInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *CloneSetInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v1alpha1a.CloneSetHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("CloneSetInterfaceMock.AddFeatureHandlerFunc: method is nil but CloneSetInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1alpha1a.CloneSetHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockCloneSetInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockCloneSetInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedCloneSetInterface.AddFeatureHandlerCalls())
func (mock *CloneSetInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v1alpha1a.CloneSetHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1alpha1a.CloneSetHandlerFunc
	}
	lockCloneSetInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockCloneSetInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *CloneSetInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v1alpha1a.CloneSetLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("CloneSetInterfaceMock.AddFeatureLifecycleFunc: method is nil but CloneSetInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v1alpha1a.CloneSetLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockCloneSetInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockCloneSetInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedCloneSetInterface.AddFeatureLifecycleCalls())
func (mock *CloneSetInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v1alpha1a.CloneSetLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v1alpha1a.CloneSetLifecycle
	}
	lockCloneSetInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockCloneSetInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *CloneSetInterfaceMock) AddHandler(ctx context.Context, name string, sync v1alpha1a.CloneSetHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("CloneSetInterfaceMock.AddHandlerFunc: method is nil but CloneSetInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1a.CloneSetHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockCloneSetInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockCloneSetInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedCloneSetInterface.AddHandlerCalls())
func (mock *CloneSetInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha1a.CloneSetHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1a.CloneSetHandlerFunc
	}
	lockCloneSetInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockCloneSetInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *CloneSetInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1alpha1a.CloneSetLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("CloneSetInterfaceMock.AddLifecycleFunc: method is nil but CloneSetInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1alpha1a.CloneSetLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockCloneSetInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockCloneSetInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedCloneSetInterface.AddLifecycleCalls())
func (mock *CloneSetInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1alpha1a.CloneSetLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1alpha1a.CloneSetLifecycle
	}
	lockCloneSetInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockCloneSetInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *CloneSetInterfaceMock) Controller() v1alpha1a.CloneSetController {
	if mock.ControllerFunc == nil {
		panic("CloneSetInterfaceMock.ControllerFunc: method is nil but CloneSetInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockCloneSetInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockCloneSetInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedCloneSetInterface.ControllerCalls())
func (mock *CloneSetInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockCloneSetInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockCloneSetInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *CloneSetInterfaceMock) Create(in1 *v1alpha1.CloneSet) (*v1alpha1.CloneSet, error) {
	if mock.CreateFunc == nil {
		panic("CloneSetInterfaceMock.CreateFunc: method is nil but CloneSetInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha1.CloneSet
	}{
		In1: in1,
	}
	lockCloneSetInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockCloneSetInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedCloneSetInterface.CreateCalls())
func (mock *CloneSetInterfaceMock) CreateCalls() []struct {
	In1 *v1alpha1.CloneSet
} {
	var calls []struct {
		In1 *v1alpha1.CloneSet
	}
	lockCloneSetInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockCloneSetInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *CloneSetInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("CloneSetInterfaceMock.DeleteFunc: method is nil but CloneSetInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockCloneSetInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockCloneSetInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedCloneSetInterface.DeleteCalls())
func (mock *CloneSetInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockCloneSetInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockCloneSetInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *CloneSetInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("CloneSetInterfaceMock.DeleteCollectionFunc: method is nil but CloneSetInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockCloneSetInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockCloneSetInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedCloneSetInterface.DeleteCollectionCalls())
func (mock *CloneSetInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockCloneSetInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockCloneSetInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *CloneSetInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("CloneSetInterfaceMock.DeleteNamespacedFunc: method is nil but CloneSetInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockCloneSetInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockCloneSetInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedCloneSetInterface.DeleteNamespacedCalls())
func (mock *CloneSetInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockCloneSetInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockCloneSetInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CloneSetInterfaceMock) Get(name string, opts v1.GetOptions) (*v1alpha1.CloneSet, error) {
	if mock.GetFunc == nil {
		panic("CloneSetInterfaceMock.GetFunc: method is nil but CloneSetInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockCloneSetInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCloneSetInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCloneSetInterface.GetCalls())
func (mock *CloneSetInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockCloneSetInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockCloneSetInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *CloneSetInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v1alpha1.CloneSet, error) {
	if mock.GetNamespacedFunc == nil {
		panic("CloneSetInterfaceMock.GetNamespacedFunc: method is nil but CloneSetInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockCloneSetInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockCloneSetInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedCloneSetInterface.GetNamespacedCalls())
func (mock *CloneSetInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockCloneSetInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockCloneSetInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CloneSetInterfaceMock) List(opts v1.ListOptions) (*v1alpha1a.CloneSetList, error) {
	if mock.ListFunc == nil {
		panic("CloneSetInterfaceMock.ListFunc: method is nil but CloneSetInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockCloneSetInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCloneSetInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCloneSetInterface.ListCalls())
func (mock *CloneSetInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockCloneSetInterfaceMockList.RLock()
	calls = mock.calls.List
	lockCloneSetInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *CloneSetInterfaceMock) ListNamespaced(namespace string, opts v1.ListOptions) (*v1alpha1a.CloneSetList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("CloneSetInterfaceMock.ListNamespacedFunc: method is nil but CloneSetInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockCloneSetInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockCloneSetInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//     len(mockedCloneSetInterface.ListNamespacedCalls())
func (mock *CloneSetInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockCloneSetInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockCloneSetInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *CloneSetInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("CloneSetInterfaceMock.ObjectClientFunc: method is nil but CloneSetInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockCloneSetInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockCloneSetInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedCloneSetInterface.ObjectClientCalls())
func (mock *CloneSetInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockCloneSetInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockCloneSetInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CloneSetInterfaceMock) Update(in1 *v1alpha1.CloneSet) (*v1alpha1.CloneSet, error) {
	if mock.UpdateFunc == nil {
		panic("CloneSetInterfaceMock.UpdateFunc: method is nil but CloneSetInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha1.CloneSet
	}{
		In1: in1,
	}
	lockCloneSetInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockCloneSetInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedCloneSetInterface.UpdateCalls())
func (mock *CloneSetInterfaceMock) UpdateCalls() []struct {
	In1 *v1alpha1.CloneSet
} {
	var calls []struct {
		In1 *v1alpha1.CloneSet
	}
	lockCloneSetInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockCloneSetInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *CloneSetInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("CloneSetInterfaceMock.WatchFunc: method is nil but CloneSetInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockCloneSetInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockCloneSetInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedCloneSetInterface.WatchCalls())
func (mock *CloneSetInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockCloneSetInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockCloneSetInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockCloneSetsGetterMockCloneSets sync.RWMutex
)

// Ensure, that CloneSetsGetterMock does implement CloneSetsGetter.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1a.CloneSetsGetter = &CloneSetsGetterMock{}

// CloneSetsGetterMock is a mock implementation of CloneSetsGetter.
//
//     func TestSomethingThatUsesCloneSetsGetter(t *testing.T) {
//
//         // make and configure a mocked CloneSetsGetter
//         mockedCloneSetsGetter := &CloneSetsGetterMock{
//             CloneSetsFunc: func(namespace string) v1alpha1a.CloneSetInterface {
// 	               panic("mock out the CloneSets method")
//             },
//         }
//
//         // use mockedCloneSetsGetter in code that requires CloneSetsGetter
//         // and then make assertions.
//
//     }
type CloneSetsGetterMock struct {
	// CloneSetsFunc mocks the CloneSets method.
	CloneSetsFunc func(namespace string) v1alpha1a.CloneSetInterface

	// calls tracks calls to the methods.
	calls struct {
		// CloneSets holds details about calls to the CloneSets method.
		CloneSets []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// CloneSets calls CloneSetsFunc.
func (mock *CloneSetsGetterMock) CloneSets(namespace string) v1alpha1a.CloneSetInterface {
	if mock.CloneSetsFunc == nil {
		panic("CloneSetsGetterMock.CloneSetsFunc: method is nil but CloneSetsGetter.CloneSets was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockCloneSetsGetterMockCloneSets.Lock()
	mock.calls.CloneSets = append(mock.calls.CloneSets, callInfo)
	lockCloneSetsGetterMockCloneSets.Unlock()
	return mock.CloneSetsFunc(namespace)
}

// CloneSetsCalls gets all the calls that were made to CloneSets.
// Check the length with:
//     len(mockedCloneSetsGetter.CloneSetsCalls())
func (mock *CloneSetsGetterMock) CloneSetsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockCloneSetsGetterMockCloneSets.RLock()
	calls = mock.calls.CloneSets
	lockCloneSetsGetterMockCloneSets.RUnlock()
	return calls
}
